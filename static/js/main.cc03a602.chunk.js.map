{"version":3,"sources":["Api.tsx","App.tsx","index.tsx"],"names":["Status","getLatLong","a","fetch","corsProxyURL","then","res","json","data","latitude","parseFloat","iss_position","longitude","status","Available","catch","err","NotAvailable","getPlusCode","latLong","code","OpenLocationCode","encode","getNearestCity","near","minDist","worldCities","city","d","distance","lng","lat","units","country","App","props","state","plusCode","pollApi","bind","queryApi","this","Grid","container","direction","justify","alignItems","Typography","variant","gutterBottom","style","textAlign","marginTop","display","latLongStr","cityStr","setInterval","setState","latStr","Math","abs","longStr","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cc03a602.chunk.js","sourcesContent":["import OpenLocationCode from 'open-location-code-typescript';\nimport worldCities from './scripts/worldcities.json';\nimport {distance} from '@turf/turf';\n\nconst corsProxyURL = 'https://cors-anywhere.herokuapp.com/';\nconst openNotifyURL = corsProxyURL + 'http://api.open-notify.org/iss-now.json';\n\nexport enum Status {\n    Available = \"Available\",\n    NotAvailable = \"Not available\"\n}\n\nexport interface LatLong {\n    latitude: number\n    longitude: number\n    status: Status\n}\n\nexport interface PlusCode {\n    code: string\n    status: Status\n}\n\nexport interface City {\n    city: string\n    country: string\n    status: Status\n}\n\nexport let defaultLatLong = (): LatLong => {\n    return {\n        latitude: 0,\n        longitude: 0,\n        status: Status.NotAvailable\n    }\n}\n\nexport let defaultPlusCode = (): PlusCode => {\n    return {\n        code: '',\n        status: Status.NotAvailable\n    }\n}\n\nexport let defaultCity = (): City => {\n    return {\n        city: 'city',\n        country: 'country',\n        status: Status.NotAvailable\n    };\n}\n\nexport let getLatLong = async (): Promise<LatLong> => {\n    return fetch(openNotifyURL)\n        .then((res) => res.json())\n        .then((data) => {\n            return {\n                latitude: parseFloat(data.iss_position.latitude),\n                longitude: parseFloat(data.iss_position.longitude),\n                status: Status.Available\n            }\n        })\n        .catch((err) => {\n            return {\n                latitude: 0,\n                longitude: 0,\n                status: Status.NotAvailable\n            }\n        });\n}\n\nexport let getPlusCode = (latLong: LatLong): PlusCode => {\n    return {\n        code: OpenLocationCode.encode(latLong.latitude, latLong.longitude),\n        status: Status.Available\n    };\n}\n\nexport let getNearestCity = (latLong: LatLong): City => {\n    let near: any;\n    let minDist: number = 10000; // 'km'\n    for (let city of worldCities) {\n        let d: number = distance(\n            [parseFloat(city.lng), parseFloat(city.lat)],\n            [latLong.longitude, latLong.latitude],\n            { units: 'kilometers' }\n        );\n        if (d < minDist) {\n            minDist = d;\n            near = city;\n        }\n    }\n    return {\n        city: near.city,\n        country: near.country,\n        status: Status.Available\n    };\n}\n\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { LatLong, PlusCode,City,  Status, getLatLong, getPlusCode, defaultLatLong, defaultPlusCode, defaultCity, getNearestCity } from './Api';\nimport './App.css';\n\nexport interface AppProps {\n  // no props\n}\n \nexport interface AppState {\n  latLong: LatLong\n  plusCode: PlusCode\n  city: City\n}\n \nclass App extends React.Component<AppProps, AppState> {\n  \n  constructor(props: AppProps) {\n    super(props)\n    this.state = {\n      latLong: defaultLatLong(),\n      plusCode: defaultPlusCode(),\n      city: defaultCity()\n    }\n\n    this.pollApi = this.pollApi.bind(this);\n    this.queryApi = this.queryApi.bind(this);\n  }\n\n  componentDidMount() {\n    this.queryApi();\n    this.pollApi();\n  }\n\n  render() {\n    return (\n      <div>\n        <Grid\n          container\n          direction=\"column\"\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <Typography variant=\"h3\" gutterBottom style={{textAlign: 'center', marginTop: '10%'}}>\n            Current position of the ISS\n          </Typography>\n          <Typography variant=\"caption\" display=\"block\" gutterBottom>\n            Latitude and Longitude\n          </Typography>\n          <Typography variant=\"h5\" gutterBottom>\n            { this.state.latLong.status === Status.Available ? this.latLongStr(this.state.latLong) : \"Not available\"}\n          </Typography>\n          <Typography variant=\"caption\" display=\"block\" gutterBottom>\n            Plus code\n          </Typography>\n          <Typography variant=\"h5\" gutterBottom>\n            { this.state.plusCode.status === Status.Available ? this.state.plusCode.code : \"Not available\"}\n          </Typography>\n          <Typography variant=\"caption\" display=\"block\" gutterBottom>\n            Nearest city\n          </Typography>\n          <Typography variant=\"h4\" gutterBottom style={{textAlign: 'center'}}>\n            { this.state.city.status === Status.Available ? this.cityStr(this.state.city) : \"Not available\" }\n          </Typography>\n        </Grid>\n      </div>\n    );\n  }\n\n  pollApi() {\n    setInterval(this.queryApi, 3000);\n  }\n\n  queryApi() {\n    getLatLong()\n    .then((latLong) => {\n      this.setState({\n        latLong,\n        plusCode: getPlusCode(latLong)\n      })\n      this.setState({\n        city: getNearestCity(latLong)\n      })\n    });\n  }\n\n  latLongStr(latLong: LatLong): string {\n    let latStr: string = `${Math.abs(latLong.latitude)}${latLong.latitude > 0 ? '째 N, ' : '째 S, '}`;\n    let longStr: string = `${Math.abs(latLong.longitude)}${latLong.longitude > 0 ? '째 E' : '째 W'}`;\n    return `${latStr} ${longStr}`;\n  }\n\n  cityStr(city: City): string {\n    return `${city.city}, ${city.country}`;\n  }\n}\n \nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}